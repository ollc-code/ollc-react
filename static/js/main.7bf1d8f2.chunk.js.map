{"version":3,"sources":["components/Common/commonStyles.tsx","components/Navbar/styles.ts","components/NavbarOptionComponent/styles.ts","components/NavbarOptionComponent/index.tsx","components/Navbar/index.tsx","pages/Home/index.tsx","App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["PageContainer","styled","div","FlexRow","NavbarContainer","OptionContainer","NavbarOptionComponent","array","map","item","index","style","padding","icon","name","Navbar","justifyContent","Home","App","className","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"wQAEaA,EAAgBC,IAAOC,IAAV,mHAabC,GANWF,IAAOC,IAAV,0FAMED,IAAOC,IAAV,2ECbPE,GDiBaH,IAAOC,IAAV,yEAKID,IAAOC,IAAV,0BCtBOD,IAAOC,IAAV,uECEfG,GDGgBJ,IAAOC,IAAV,8CCHKD,IAAOC,IAAV,0N,0DCEfI,EAAkC,WAE9C,IAAMC,EAAQ,CACb,CACC,KAAQ,OACR,KAAQ,cAAC,IAAD,KAET,CACC,KAAQ,YACR,KAAQ,cAAC,IAAD,KAET,CACC,KAAQ,gBACR,KAAQ,cAAC,IAAD,MAIV,OACC,mCACEA,EAAMC,KAAI,SAACC,EAAMC,GACjB,OACC,eAACL,EAAD,WACI,mBAAGM,MAAO,CAACC,QAAQ,OAAnB,SAA4BH,EAAKI,OACpC,mBAAGF,MAAO,CAACC,QAAQ,OAAnB,SAA4BH,EAAKK,SAFZJ,SCRZK,EAdU,WACxB,OACC,eAACX,EAAD,CAAiBO,MAAO,CACvBK,eAAgB,gBAChBJ,QAAS,YAFV,UAIE,sCACA,cAACT,EAAD,UACC,cAAC,EAAD,UCDUc,EARQ,WACtB,OACC,cAACjB,EAAD,UACC,cAAC,EAAD,OCYYkB,EAdc,WAC5B,OACC,qBAAKC,UAAU,MAAf,SACC,cAAC,IAAD,UACC,cAAC,IAAD,UACC,cAAC,IAAD,CAAOC,KAAK,IAAZ,SACC,cAAC,EAAD,aCCAC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DA0CnC,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,+GAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MC7FjEC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDenB,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,cAAwB9B,OAAOC,SAAS8B,MACpDC,SAAWhC,OAAOC,SAAS+B,OAIvC,OAGFhC,OAAOiC,iBAAiB,QAAQ,WAC9B,IAAM5B,EAAK,UAAMyB,cAAN,sBAEPhC,IAgEV,SAAiCO,EAAeC,GAE9C4B,MAAM7B,EAAO,CACX8B,QAAS,CAAE,iBAAkB,YAE5BzB,MAAK,SAAC0B,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,MAAK,SAACC,GAClCA,EAAa+B,aAAahC,MAAK,WAC7BV,OAAOC,SAAS0C,eAKpBvC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IAAI,oEAtFVyB,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,MAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,OCrC/BuC,K","file":"static/js/main.7bf1d8f2.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const PageContainer = styled.div`\r\n\tbackground: #ffffff;\r\n\theight: 100vh;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n`;\r\n\r\nexport const PageBody = styled.div`\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\theight: 100%;\r\n`;\r\n\r\nexport const FlexRow = styled.div`\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n`;\r\nexport const FlexColumn = styled.div`\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n`;\r\n\r\nexport const PageContent = styled.div``;\r\n","import styled from 'styled-components';\r\n\r\nexport const NavbarContainer = styled.div`\r\n\tdisplay: flex;\r\n\tbackground: #f3f3f3;\r\n`;\r\n\r\nexport const NavbarOptions = styled.div`\r\n\tdisplay: flex;\r\n`;","\r\nimport styled from 'styled-components';\r\n\r\n\r\nexport const OptionContainer = styled.div`\r\n\tdisplay: flex;\r\n\talign-items: left;\r\n\tjustify-content: center;\r\n\tpadding: 0px 20px;\r\n\r\n\t&:hover {\r\n\t\tbackground-color: #fff;\r\n\t\tfont-weight: bolder;\r\n\t\ttransition: 200ms;\r\n\t}\r\n`;","import React from 'react';\r\nimport { OptionContainer } from './styles';\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport AnnouncementIcon from \"@material-ui/icons/Announcement\";\r\nimport LiveTvIcon from \"@material-ui/icons/LiveTv\";\r\n\r\nexport const NavbarOptionComponent: React.FC = () => {\r\n\r\n\tconst array = [\r\n\t\t{\r\n\t\t\t\"name\": \"Home\",\r\n\t\t\t\"icon\": <HomeIcon />\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Live Mass\",\r\n\t\t\t\"icon\": <LiveTvIcon />\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Announcements\",\r\n\t\t\t\"icon\": <AnnouncementIcon />\r\n\t\t}\r\n\t]\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{array.map((item, index) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<OptionContainer key={index}>\r\n\t\t\t\t    \t<p style={{padding:\"5px\"}}>{item.icon}</p>\r\n\t\t\t\t\t\t<p style={{padding:\"5px\"}}>{item.name}</p>\r\n\t\t\t\t\t</OptionContainer>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</>\r\n\t);\r\n};","import React from 'react';\r\nimport { NavbarContainer } from './styles';\r\nimport { NavbarOptionComponent } from '../NavbarOptionComponent';\r\nimport { FlexRow } from '../Common/commonStyles';\r\n\r\nconst Navbar: React.FC = () => {\r\n\treturn (\r\n\t\t<NavbarContainer style={{ \r\n\t\t\tjustifyContent: 'space-between',\r\n\t\t\tpadding: '0px 30px'}}\r\n\t\t\t>\r\n\t\t\t\t<h3>OLLC</h3>\r\n\t\t\t\t<FlexRow>\r\n\t\t\t\t\t<NavbarOptionComponent />\r\n\t\t\t\t</FlexRow>\r\n\t\t</NavbarContainer>\r\n\t);\r\n};\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport { PageContainer } from '../../components/Common/commonStyles';\r\nimport Navbar from '../../components/Navbar';\r\n\r\nconst Home: React.FC = () => {\r\n\treturn (\r\n\t\t<PageContainer>\r\n\t\t\t<Navbar />\r\n\t\t</PageContainer>\r\n\t);\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport Home from './pages/Home';\r\n\r\nexport const App: React.FC = () => {\r\n\treturn (\r\n\t\t<div className='App'>\r\n\t\t\t<Router>\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route path='/'>\r\n\t\t\t\t\t\t<Home />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t</Switch>\r\n\t\t\t</Router>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}