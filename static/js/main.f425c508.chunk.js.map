{"version":3,"sources":["components/Common/commonStyles.tsx","components/Navbar/styles.ts","components/NavbarOptionComponent/styles.ts","components/NavbarOptionComponent/index.tsx","components/Navbar/index.tsx","pages/Home/index.tsx","App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["PageContainer","styled","div","FlexRow","NavbarContainer","OptionContainer","NavbarOptionComponent","array","map","item","index","style","padding","icon","name","Navbar","justifyContent","Home","App","className","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"wQAEaA,EAAgBC,IAAOC,IAAV,mHAabC,GANWF,IAAOC,IAAV,0FAMED,IAAOC,IAAV,2ECbPE,GDiBaH,IAAOC,IAAV,yEAKID,IAAOC,IAAV,0BCtBOD,IAAOC,IAAV,uECEfG,GDGgBJ,IAAOC,IAAV,8CCHKD,IAAOC,IAAV,0N,0DCEfI,EAAkC,WAE9C,IAAMC,EAAQ,CACb,CACC,KAAQ,OACR,KAAQ,cAAC,IAAD,KAET,CACC,KAAQ,YACR,KAAQ,cAAC,IAAD,KAET,CACC,KAAQ,gBACR,KAAQ,cAAC,IAAD,MAIV,OACC,mCACEA,EAAMC,KAAI,SAACC,EAAMC,GACjB,OACC,eAACL,EAAD,WACI,mBAAGM,MAAO,CAACC,QAAQ,OAAnB,SAA4BH,EAAKI,OACpC,mBAAGF,MAAO,CAACC,QAAQ,OAAnB,SAA4BH,EAAKK,SAFZJ,SCRZK,EAdU,WACxB,OACC,eAACX,EAAD,CAAiBO,MAAO,CACvBK,eAAgB,gBAChBJ,QAAS,YAFV,UAIE,0CACA,cAACT,EAAD,UACC,cAAC,EAAD,UCDUc,EARQ,WACtB,OACC,cAACjB,EAAD,UACC,cAAC,EAAD,OCYYkB,EAdc,WAC5B,OACC,qBAAKC,UAAU,MAAf,SACC,cAAC,IAAD,UACC,cAAC,IAAD,UACC,cAAC,IAAD,CAAOC,KAAK,IAAZ,SACC,cAAC,EAAD,aCCAC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DA0CnC,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,+GAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MC7FjEC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDenB,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,cAAwB9B,OAAOC,SAAS8B,MACpDC,SAAWhC,OAAOC,SAAS+B,OAIvC,OAGFhC,OAAOiC,iBAAiB,QAAQ,WAC9B,IAAM5B,EAAK,UAAMyB,cAAN,sBAEPhC,IAgEV,SAAiCO,EAAeC,GAE9C4B,MAAM7B,EAAO,CACX8B,QAAS,CAAE,iBAAkB,YAE5BzB,MAAK,SAAC0B,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,MAAK,SAACC,GAClCA,EAAa+B,aAAahC,MAAK,WAC7BV,OAAOC,SAAS0C,eAKpBvC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IAAI,oEAtFVyB,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,MAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,OCrC/BuC,K","file":"static/js/main.f425c508.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const PageContainer = styled.div`\n\tbackground: #ffffff;\n\theight: 100vh;\n\tdisplay: flex;\n\tflex-direction: column;\n`;\n\nexport const PageBody = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\theight: 100%;\n`;\n\nexport const FlexRow = styled.div`\n\tdisplay: flex;\n\tjustify-content: center;\n`;\nexport const FlexColumn = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n`;\n\nexport const PageContent = styled.div``;\n","import styled from 'styled-components';\n\nexport const NavbarContainer = styled.div`\n\tdisplay: flex;\n\tbackground: #f3f3f3;\n`;\n\nexport const NavbarOptions = styled.div`\n\tdisplay: flex;\n`;","\nimport styled from 'styled-components';\n\n\nexport const OptionContainer = styled.div`\n\tdisplay: flex;\n\talign-items: left;\n\tjustify-content: center;\n\tpadding: 0px 20px;\n\n\t&:hover {\n\t\tbackground-color: #fff;\n\t\tfont-weight: bolder;\n\t\ttransition: 200ms;\n\t}\n`;","import React from 'react';\nimport { OptionContainer } from './styles';\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport AnnouncementIcon from \"@material-ui/icons/Announcement\";\nimport LiveTvIcon from \"@material-ui/icons/LiveTv\";\n\nexport const NavbarOptionComponent: React.FC = () => {\n\n\tconst array = [\n\t\t{\n\t\t\t\"name\": \"Home\",\n\t\t\t\"icon\": <HomeIcon />\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Live Mass\",\n\t\t\t\"icon\": <LiveTvIcon />\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Announcements\",\n\t\t\t\"icon\": <AnnouncementIcon />\n\t\t}\n\t]\n\n\treturn (\n\t\t<>\n\t\t\t{array.map((item, index) => {\n\t\t\t\treturn (\n\t\t\t\t\t<OptionContainer key={index}>\n\t\t\t\t    \t<p style={{padding:\"5px\"}}>{item.icon}</p>\n\t\t\t\t\t\t<p style={{padding:\"5px\"}}>{item.name}</p>\n\t\t\t\t\t</OptionContainer>\n\t\t\t\t);\n\t\t\t})}\n\t\t</>\n\t);\n};","import React from 'react';\nimport { NavbarContainer } from './styles';\nimport { NavbarOptionComponent } from '../NavbarOptionComponent';\nimport { FlexRow } from '../Common/commonStyles';\n\nconst Navbar: React.FC = () => {\n\treturn (\n\t\t<NavbarContainer style={{ \n\t\t\tjustifyContent: 'space-between',\n\t\t\tpadding: '0px 30px'}}\n\t\t\t>\n\t\t\t\t<h3>OLLC Dev</h3>\n\t\t\t\t<FlexRow>\n\t\t\t\t\t<NavbarOptionComponent />\n\t\t\t\t</FlexRow>\n\t\t</NavbarContainer>\n\t);\n};\n\nexport default Navbar;","import React from 'react';\nimport { PageContainer } from '../../components/Common/commonStyles';\nimport Navbar from '../../components/Navbar';\n\nconst Home: React.FC = () => {\n\treturn (\n\t\t<PageContainer>\n\t\t\t<Navbar />\n\t\t</PageContainer>\n\t);\n};\n\nexport default Home;\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Home from './pages/Home';\n\nexport const App: React.FC = () => {\n\treturn (\n\t\t<div className='App'>\n\t\t\t<Router>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path='/'>\n\t\t\t\t\t\t<Home />\n\t\t\t\t\t</Route>\n\t\t\t\t</Switch>\n\t\t\t</Router>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}